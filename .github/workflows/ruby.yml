name: Github Testing

on: [push]

jobs:
  test:
    services:
      postgres:
        image: postgres:17
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USERNAME: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
        ruby: ['3.4.4']
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ endsWith(matrix.ruby, 'head') || matrix.ruby == 'debug' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically

      - name: Config bundler
        run:  |
          bundle config set without 'development staging production'
          bundle config set deployment '[secure]'
          bundle env
          head -n1 $(which bundle)

      - name: Run Tests
        env:
          PG_DATABASE: postgres
          PG_HOST: localhost
          PG_USER: postgres
          PG_PASSWORD: postgres
          PG_PORT: ${{ job.services.postgres.ports[5432] }}
          RAILS_ENV: test
          COVERAGE: true
          DISABLE_SPRING: 1

        run: |
          cp config/application.yml.sample config/application.yml
          bundle exec rake db:setup
          bundle exec rails assets:precompile
          bundle exec rspec

      - name: Upload Capybara screenshots
        if: failure()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: capybara-screenshots
          path: tmp/capybara
        
      - name: Install qlty CLI
        run: |
          curl -LSs https://qlty.sh | bash
          echo "${HOME}/.qlty/bin" >> $GITHUB_PATH

      - name: Upload coverage to Qlty
        env:
          QLTY_COVERAGE_TOKEN: ${{ secrets.QLTY_COVERAGE_TOKEN }}
        run: |
          ls -la coverage/
          if [ -d "coverage/lcov" ]; then
            echo "Found LCOV directory, combining files..."
            # Combine all .lcov files into a single coverage.lcov file
            cat coverage/lcov/*.lcov > coverage/coverage.lcov
            qlty coverage publish --format=lcov coverage/coverage.lcov
          elif [ -f "coverage/coverage.lcov" ]; then
            qlty coverage publish --format=lcov coverage/coverage.lcov
          elif [ -f "coverage/lcov.info" ]; then
            qlty coverage publish --format=lcov coverage/lcov.info
          else
            echo "No LCOV coverage file found. Available files:"
            find coverage/ -type f -name "*.lcov" -o -name "*.info" -o -name "*.json" -o -name "*.xml"
            echo "Please check what coverage format your test runner generates"
            exit 1
          fi

  security_scan:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        ruby: ['3.4.4']
    steps:
      - uses: actions/checkout@v4
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true
      - name: Config bundler
        run:  |
          bundle config set without 'development staging production'
          bundle config set deployment '[secure]'
          bundle env
          head -n1 $(which bundle)
      - name: Scan for security vulnerabilities
        run: |
          cp config/application.yml.sample config/application.yml
          bin/importmap audit
          bundle exec bundler-audit --update
          bin/brakeman --no-pager
