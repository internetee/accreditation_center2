name: Auto approve & merge Dependabot and Renovate PRs

on:
  pull_request:
    types: [opened, edited, synchronize, reopened, labeled]
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-approve-merge:
    runs-on: ubuntu-latest
    if: (github.actor == 'dependabot[bot]' || github.actor == 'renovate[bot]') && github.repository == 'internetee/accreditation_center2'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh
      - name: Auto approve PR
        uses: hmarr/auto-approve-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch Dependabot metadata
        if: github.actor == 'dependabot[bot]'
        id: metadata
        uses: dependabot/fetch-metadata@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if PR should be auto-merged
        id: check_auto_merge
        run: |
          echo "Checking auto-merge eligibility for PR #${{ github.event.pull_request.number }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          
          if [ "${{ github.actor }}" == "dependabot[bot]" ]; then
            echo "Processing Dependabot PR"
            echo "Update type: ${{ steps.metadata.outputs.update-type }}"
            if [[ "${{ steps.metadata.outputs.update-type }}" == "version-update:semver-patch" ]]; then
              echo "auto_merge=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Auto-merge: Dependabot patch update detected"
            else
              echo "auto_merge=false" >> $GITHUB_OUTPUT
              echo "‚ùå Auto-merge: Dependabot non-patch update, skipping"
            fi
          elif [ "${{ github.actor }}" == "renovate[bot]" ]; then
            echo "Processing Renovate PR"
            # Extract label names from the labels array
            LABEL_NAMES=$(echo '${{ toJson(github.event.pull_request.labels) }}' | jq -r '.[].name' | tr '\n' ' ')
            echo "PR Labels: $LABEL_NAMES"
            
            # Check for patch label specifically (most important)
            if [[ "$LABEL_NAMES" == *"patch"* ]]; then
              echo "auto_merge=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Auto-merge: Renovate patch update detected (patch label)"
            # Also allow bundler, ruby-version, and github-actions for patch-level updates
            elif [[ "$LABEL_NAMES" == *"bundler"* ]] || [[ "$LABEL_NAMES" == *"ruby-version"* ]] || [[ "$LABEL_NAMES" == *"github-actions"* ]]; then
              echo "auto_merge=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Auto-merge: Renovate update detected (dependency-specific label): $LABEL_NAMES"
            else
              echo "auto_merge=false" >> $GITHUB_OUTPUT
              echo "‚ùå Auto-merge: Renovate non-patch update, skipping. Labels: $LABEL_NAMES"
            fi
          else
            echo "auto_merge=false" >> $GITHUB_OUTPUT
            echo "‚ùå Auto-merge: Unknown actor (${{ github.actor }}), skipping"
          fi
        shell: bash

      - name: Wait for CI checks
        if: steps.check_auto_merge.outputs.auto_merge == 'true'
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30

      - name: Add auto-merge comment
        if: steps.check_auto_merge.outputs.auto_merge == 'true'
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "ü§ñ **Auto-merge enabled**
          
          This patch-level dependency update has been automatically approved and will be merged once all CI checks pass.
          
          - **Actor**: ${{ github.actor }}
          - **Update Type**: ${{ steps.metadata.outputs.update-type || 'Renovate patch update' }}
          - **Labels**: $(echo '${{ toJson(github.event.pull_request.labels) }}' | jq -r '.[].name' | tr '\n' ' ')
          
          ‚úÖ All checks must pass before merge"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-merge PR
        if: steps.check_auto_merge.outputs.auto_merge == 'true'
        run: |
          echo "üöÄ Attempting to auto-merge PR #${{ github.event.pull_request.number }}"
          echo "PR Title: ${{ github.event.pull_request.title }}"
          echo "PR Author: ${{ github.event.pull_request.user.login }}"
          
          # Enable auto-merge with merge strategy
          gh pr merge --auto --merge ${{ github.event.pull_request.number }} || {
            echo "‚ö†Ô∏è Auto-merge command failed, but this is expected behavior"
            echo "The PR will be merged automatically once all checks pass"
            exit 0
          }
          
          echo "‚úÖ Auto-merge enabled successfully for PR #${{ github.event.pull_request.number }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          